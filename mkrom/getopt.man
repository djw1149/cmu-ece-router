


GETOPT(3)           UNIX Programmer's Manual            GETOPT(3)



NAME
     getopt - get option letter from argv

SYNOPSIS
     int getopt(argc, argv, optstring)
     int argc;
     char **argv;
     char *optstring;

     extern char *optarg;
     extern int optind;

DESCRIPTION
     _G_e_t_o_p_t returns the next option letter in _a_r_g_v that matches a
     letter in _o_p_t_s_t_r_i_n_g.  _O_p_t_s_t_r_i_n_g is a string of recognized
     option letters; if a letter is followed by a colon, the
     option is expected to have an argument that may or may not
     be separated from it by white space.  _O_p_t_a_r_g is set to point
     to the start of the option argument on return from _g_e_t_o_p_t.

     _G_e_t_o_p_t places in _o_p_t_i_n_d the _a_r_g_v index of the next argument
     to be processed.  Because _o_p_t_i_n_d is external, it is normally
     initialized to zero automatically before the first call to
     _g_e_t_o_p_t.

     When all options have been processed (i.e., up to the first
     non-option argument), _g_e_t_o_p_t returns EOF.  The special
     option -- may be used to delimit the end of the options; EOF
     will be returned, and -- will be skipped.

SEE ALSO
     getopt(1)

DIAGNOSTICS
     _G_e_t_o_p_t prints an error message on _s_t_d_e_r_r and returns a ques-
     tion mark (?) when it encounters an option letter not
     included in _o_p_t_s_t_r_i_n_g.

EXAMPLE
     The following code fragment shows how one might process the
     arguments for a command that can take the mutually exclusive
     options a and b, and the options f and o, both of which
     require arguments:

          main(argc, argv)
          int argc;
          char **argv;
          {
               int c;
               extern int optind;
               extern char *optarg;
               .



Printed 10/25/86              local                             1






GETOPT(3)           UNIX Programmer's Manual            GETOPT(3)



               .
               .
               while ((c = getopt(argc, argv, "abf:o:")) != EOF)
                    switch (c) {
                    case 'a':
                         if (bflg)
                              errflg++;
                         else
                              aflg++;
                         break;
                    case 'b':
                         if (aflg)
                              errflg++;
                         else
                              bproc();
                         break;
                    case 'f':
                         ifile = optarg;
                         break;
                    case 'o':
                         ofile = optarg;
                         break;
                    case '?':
                    default:
                         errflg++;
                         break;
                    }
               if (errflg) {
                    fprintf(stderr, "Usage: ...");
                    exit(2);
               }
               for (; optind < argc; optind++) {
                    .
                    .
                    .
               }
               .
               .
               .
          }

HISTORY
     Written by Henry Spencer, working from a Bell Labs manual
     page.  Behavior believed identical to the Bell version.

BUGS
     It is not obvious how `-' standing alone should be treated;
     this version treats it as a non-option argument, which is
     not always right.

     Option arguments are allowed to begin with `-'; this is rea-
     sonable but reduces the amount of error checking possible.



Printed 10/25/86              local                             2






GETOPT(3)           UNIX Programmer's Manual            GETOPT(3)



     _G_e_t_o_p_t is quite flexible but the obvious price must be paid:
     there is much it could do that it doesn't, like checking
     mutually exclusive options, checking type of option argu-
     ments, etc.



















































Printed 10/25/86              local                             3



